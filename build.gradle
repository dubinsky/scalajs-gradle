plugins {
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'scala'
  id 'signing'
  id 'org.podval.tools.scalajs' version '0.8.7'
  id 'com.gradle.plugin-publish' version '1.3.1'
}

group = 'org.podval.tools'
version = version_plugin
description = 'Gradle plugin for cross-compiling to JVM, Scala.js and Scala Native.'

scala.scalaVersion = version_scala

dependencies {
  // for TestClassVisitor
  implementation "org.ow2.asm:asm:9.8"

  // Scala.js Linker uses it but somehow does not bring it onto the classpath;
  // adding this dynamically did not *quite* work - and that's ok :)
  implementation "org.scala-lang.modules:scala-parallel-collections_2.13:$version_scala_parallel_collections"

  // for running tests
  compileOnly "org.scala-sbt:test-interface:$version_sbt_test_interface"

  // for Scala.js support
  compileOnly "org.scala-js:scalajs-linker_2.13:$version_scalajs"
  compileOnly "org.scala-js:scalajs-sbt-test-adapter_2.13:$version_scalajs"
  compileOnly "org.scala-js:scalajs-env-jsdom-nodejs_2.13:$version_scalajs_env_jsdom_nodejs"
  compileOnly "io.github.gmkumar2005:scala-js-env-playwright_2.12:$version_scala_js_env_playwright"

  // for Scala Native support
  compileOnly "org.scala-native:tools_native0.5_3:$version_scalanative"
  compileOnly "org.scala-native:test-runner_3:$version_scalanative"

  // for framework-specific exceptions
  compileOnly "junit:junit:$version_junit" // runner: "com.github.sbt:junit-interface:$version_framework_junit4"
  compileOnly "org.scalatest:scalatest_3:$version_framework_scalatest"
  compileOnly "org.scalacheck:scalacheck_3:$version_framework_scalacheck"
  compileOnly "com.lihaoyi:utest_3:$version_framework_utest"
  compileOnly "org.specs2:specs2-core_3:$version_framework_specs2"
  compileOnly "org.scalameta:munit_3:$version_framework_munit"
  compileOnly "dev.zio:zio-test_3:$version_framework_zio_test" // runner: "dev.zio:zio-test-sbt:$version_framework_zio_test""

  // test framework used to test this project
  testImplementation "org.scalatest:scalatest_3:$version_framework_scalatest"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

dependencyUpdates {
  revision="release"
}

tasks.withType(ScalaCompile).configureEach {
  scalaCompileOptions.with {
    additionalParameters = [
      '-new-syntax',
      '-feature',
      '-language:strictEquality'
//      '-source:future'
    ]
  }
}

jar {
  manifest {
    attributes(
      'Implementation-Title'  : project.description,
      'Implementation-Version': project.version
    )
  }
}

tasks.register('sourcesJar', Jar) {
  from sourceSets.main.allSource
  archiveClassifier.set('sources')
}

tasks.register('scaladocJar', Jar) {
  from scaladoc.destinationDir
  archiveClassifier.set('scaladoc')
}
scaladocJar.dependsOn scaladoc

// There is no Java in the project :)
project.gradle.startParameter.excludedTaskNames.add('compileJava')
// but Maven Central requires javadoc JAR...
tasks.register('javadocJar', Jar) {
  from javadoc.destinationDir
  archiveClassifier.set('javadoc')
}
javadocJar.dependsOn(javadoc)

final String gitHubRepository = "dubinsky/scalajs-gradle"
final String gitHubRepositoryUrl = "https://github.com/$gitHubRepository"
final String orgName = 'Podval Group'
final String orgUrl = 'https://www.podval.org'

publishing {
  repositories {
    maven {
      name = 'mavenCentral'
      url = version.endsWith('SNAPSHOT') ?
        'https://oss.sonatype.org/content/repositories/snapshots' :
        'https://oss.sonatype.org/service/local/staging/deploy/maven2'

      // This will use mavenCentralUsername and mavenCentralPassword properties - if they are available.
      credentials(PasswordCredentials)
    }
  }

  publications {
    library(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact scaladocJar
      artifact javadocJar

      pom {
        name = project.name
        description = project.description
        url = gitHubRepositoryUrl
        scm {
          url = gitHubRepositoryUrl
          connection = "scm:git:git://github.com/${gitHubRepository}.git"
          developerConnection = "scm:git:ssh://github.com/${gitHubRepository}.git"
        }
        licenses {
          license {
            name = 'The Apache Software License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
            comments = 'A business-friendly OSS license'
          }
        }
        organization {
          name = orgName
          url = orgUrl
        }
        developers {
          developer {
            id = 'dub'
            name = 'Leonid Dubinsky'
            email = 'dub@podval.org'
            url = 'https://dub.podval.org'
            organization = orgName
            organizationUrl = orgUrl
            timezone = '-5'
          }
        }
      }
    }
  }
}

signing {
  sign publishing.publications.library
  useInMemoryPgpKeys(
    findProperty('gnupg.dub-podval-org.key').toString(),
    findProperty('gnupg.dub-podval-org.password').toString()
  )
}

gradlePlugin {
  website = gitHubRepositoryUrl
  vcsUrl  = gitHubRepositoryUrl //.git' ?
  plugins {
    scalajs {
      id = 'org.podval.tools.scalajs'
      implementationClass = 'org.podval.tools.backend.BackendPlugin'
      displayName = project.description
      description = project.description
      tags.set([
        'scala', 'scalajs', 'scalanative', 'crosscompile',
        'sbt', 'testing',
        'junit4', 'munit', 'scalatest', 'scalacheck', 'specs2', 'utest', 'ziotest'])
    }
  }
}

tasks.register('uploadLibrary')
uploadLibrary.description = 'Upload artifacts'
uploadLibrary.group = 'publishing'
uploadLibrary.dependsOn(publishLibraryPublicationToMavenCentralRepository)

tasks.register('upload')
upload.description = 'Upload artifacts and plugins'
upload.group = 'publishing'
upload.dependsOn(uploadLibrary)
upload.dependsOn(publishPlugins)
