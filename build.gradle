plugins {
  id 'com.github.ben-manes.versions' version '0.42.0'
  id 'scala'
  id 'com.github.maiflai.scalatest'  version '0.32'
  id 'java-gradle-plugin'
  id 'maven-publish'
  id 'signing'
  id 'com.gradle.plugin-publish' version '0.20.0'
}

group = 'org.podval.tools'
version = '0.1.0'
description = 'Gradle plugin for ScalaJS'

final String scalaVersion       = '3.1.3'
final String scala2versionMinor = '2.13'
final String scalaJsVersion     = '1.10.1'
final String sbtVersion         = '1.7.1'
final String flexmarkVersion    = '0.64.0'

dependencies {
  implementation "org.scala-lang:scala3-library_3:$scalaVersion"
  implementation 'org.opentorah:opentorah-util:0.10.3'
  implementation 'org.scala-sbt:test-interface:1.0'

  zinc "org.scala-sbt:zinc_$scala2versionMinor:$sbtVersion"

  compileOnly "org.scala-js:scalajs-linker_$scala2versionMinor:$scalaJsVersion"
  compileOnly "org.scala-js:scalajs-sbt-test-adapter_$scala2versionMinor:$scalaJsVersion"
  compileOnly "org.scala-js:scalajs-env-jsdom-nodejs_$scala2versionMinor:1.1.0"

  compileOnly "org.scala-sbt:zinc-core_$scala2versionMinor:$sbtVersion"
  compileOnly "org.scala-sbt:zinc-persist_$scala2versionMinor:$sbtVersion"

  testImplementation "org.scalatest:scalatest_3:3.2.12"
  testImplementation "com.vladsch.flexmark:flexmark:$flexmarkVersion"
  testImplementation "com.vladsch.flexmark:flexmark-profile-pegdown:$flexmarkVersion"
}

tasks.withType(ScalaCompile) {
  scalaCompileOptions.with {
    targetCompatibility = '' // TODO remove when https://youtrack.jetbrains.com/issue/SCL-18813 is fixed
    additionalParameters = [
      '-new-syntax',
      '-feature',
      '-language:strictEquality'
//      '-source:future'
    ]
  }
}

// There is no Java in the project :)
project.gradle.startParameter.excludedTaskNames.add('compileJava')

jar {
  manifest {
    attributes(
      'Implementation-Title'  : project.description,
      'Implementation-Version': project.version
    )
  }
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  archiveClassifier.set('sources')
}

task scaladocJar(type: Jar) {
  from scaladoc.destinationDir
  archiveClassifier.set('scaladoc')
}
scaladocJar.dependsOn scaladoc

// There is no Java in the project :)
project.gradle.startParameter.excludedTaskNames.add('compileJava')
// but Maven Central requires javadoc JAR...
task javadocJar(type: Jar) {
  from javadoc.destinationDir
  archiveClassifier.set('javadoc')
}
javadocJar.dependsOn(javadoc)

final String gitHubRepository = "dubinsky/scalajs-gradle"
final String gitHubRepositoryUrl = "https://github.com/$gitHubRepository"
final String orgName = 'Podval Group'
final String orgUrl = 'https://www.podval.org'
final List<String> projectTags = ['Scala', 'ScalaJS', 'sbt', 'testing', 'ScalaTest']

publishing {
  repositories {
    maven {
      name = 'mavenCentral'
      url = version.endsWith('SNAPSHOT') ?
        'https://oss.sonatype.org/content/repositories/snapshots' :
        'https://oss.sonatype.org/service/local/staging/deploy/maven2'

      // Note: this will use mavenCentralUsername and mavenCentralPassword properties - if they are available
      credentials(PasswordCredentials)
    }
  }

  publications {
    library(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact scaladocJar
      artifact javadocJar

      pom {
        name = project.name
        description = project.description
        url = gitHubRepositoryUrl
        scm {
          url = gitHubRepositoryUrl
          connection = "scm:git:git://github.com/${gitHubRepository}.git"
          developerConnection = "scm:git:ssh://github.com/${gitHubRepository}.git"
        }
        licenses {
          license {
            name = 'The Apache Software License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
            comments = 'A business-friendly OSS license'
          }
        }
        organization {
          name = orgName
          url = orgUrl
        }
        developers {
          developer {
            id = 'dub'
            name = 'Leonid Dubinsky'
            email = 'dub@podval.org'
            url = 'https://dub.podval.org'
            organization = orgName
            organizationUrl = orgUrl
            timezone = '-5'
          }
        }
      }
    }
  }
}

signing {
  useInMemoryPgpKeys(findProperty('gnupg.dub-podval-org.key'), findProperty('gnupg.dub-podval-org.password'))
  sign publishing.publications.library
}

gradlePlugin {
  plugins {
    scalajs {
      id = 'org.podval.tools.scalajs'
      implementationClass = 'org.podval.tools.scalajs.ScalaJSPlugin'
    }
  }
}

pluginBundle {
  website = gitHubRepositoryUrl
  vcsUrl  = gitHubRepositoryUrl //.git' ?

  plugins {
    scalajs {
      displayName = project.description
      description = project.description
      tags        = projectTags
    }
  }

  // If you have an existing plugin deployed to MavenCentral and would like to keep
  // your existing group ID and artifact ID for continuity, you can specify
  // them here (needs manual approval on first publication).
  mavenCoordinates {
    groupId    = project.group
    artifactId = project.name
  }
}

task uploadLibrary
uploadLibrary.description('Upload artifacts')
uploadLibrary.group('publishing')
uploadLibrary.dependsOn(publishLibraryPublicationToMavenCentralRepository)

task upload
upload.description('Upload artifacts and plugins')
upload.group('publishing')
upload.dependsOn(uploadLibrary)
upload.dependsOn(publishPlugins)
