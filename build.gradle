plugins {
  id 'com.github.ben-manes.versions' version '0.44.0'
  id 'scala'
  id 'signing'
  id 'com.gradle.plugin-publish' version '1.1.0'
  id 'org.podval.tools.scalajs' version '0.4.9' // Note: must be applied *after* Plugin Portal Plugin
}

group = 'org.podval.tools'
version = '0.4.10'
description = 'Gradle plugin for ScalaJS'

final String scalaVersion       = '3.3.0'
final String scala2versionMinor = '2.13'
final String scalaJsVersion     = '1.13.1'
final String sbtVersion         = '1.8.0'

dependencies {
  implementation "org.scala-lang:scala3-library_3:$scalaVersion"

  // used: Gradle, DependencyRequirement, Node
  implementation 'org.opentorah:opentorah-util:0.10.11'

  zinc "org.scala-sbt:zinc_$scala2versionMinor:$sbtVersion"

  compileOnly 'org.scala-sbt:test-interface:1.0'

  // Note: transitive dependencies: zinc-persist -> zinc-core -> zinc-apiinfo, io, compiler-interface
  compileOnly "org.scala-sbt:zinc-persist_$scala2versionMinor:$sbtVersion"

  compileOnly "org.scala-js:scalajs-linker_$scala2versionMinor:$scalaJsVersion"
  compileOnly "org.scala-js:scalajs-sbt-test-adapter_$scala2versionMinor:$scalaJsVersion"
  compileOnly "org.scala-js:scalajs-env-jsdom-nodejs_$scala2versionMinor:1.1.0"

  // For framework-specific exceptions
  compileOnly 'junit:junit:4.13.2'
  compileOnly 'org.scalatest:scalatest_3:3.2.16'
  compileOnly 'org.scalacheck:scalacheck_3:1.17.0'
  compileOnly 'com.lihaoyi:utest_3:0.8.1'
  compileOnly 'org.specs2:specs2-core_3:5.2.0'
  compileOnly 'org.scalameta:munit_3:0.7.29'
  // TODO ZIO Test

  testImplementation 'org.scalatest:scalatest_3:3.2.16'

  // TODO - was...
//  // Used for running the GradleRunner tests in the testNg task -
//  // and to compare my integration with Gradle and Idea with the real one :)
//  testImplementation 'org.testng:testng:7.7.1'
}

//tasks.register('testNg', Test) {
//  setGroup("verification")
//  useTestNG()
//}

java.toolchain.languageVersion = JavaLanguageVersion.of(11)

tasks.withType(ScalaCompile).configureEach {
  scalaCompileOptions.with {
    additionalParameters = [
      '-new-syntax',
      '-feature',
      '-language:strictEquality'
//      '-source:future'
    ]
  }
}

jar {
  manifest {
    attributes(
      'Implementation-Title'  : project.description,
      'Implementation-Version': project.version
    )
  }
}

tasks.register('sourcesJar', Jar) {
  from sourceSets.main.allSource
  archiveClassifier.set('sources')
}

tasks.register('scaladocJar', Jar) {
  from scaladoc.destinationDir
  archiveClassifier.set('scaladoc')
}
scaladocJar.dependsOn scaladoc

// There is no Java in the project :)
project.gradle.startParameter.excludedTaskNames.add('compileJava')
// but Maven Central requires javadoc JAR...
tasks.register('javadocJar', Jar) {
  from javadoc.destinationDir
  archiveClassifier.set('javadoc')
}
javadocJar.dependsOn(javadoc)

final String gitHubRepository = "dubinsky/scalajs-gradle"
final String gitHubRepositoryUrl = "https://github.com/$gitHubRepository"
final String orgName = 'Podval Group'
final String orgUrl = 'https://www.podval.org'

publishing {
  repositories {
    maven {
      name = 'mavenCentral'
      url = version.endsWith('SNAPSHOT') ?
        'https://oss.sonatype.org/content/repositories/snapshots' :
        'https://oss.sonatype.org/service/local/staging/deploy/maven2'

      // Note: this will use mavenCentralUsername and mavenCentralPassword properties - if they are available
      credentials(PasswordCredentials)
    }
  }

  publications {
    library(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact scaladocJar
      artifact javadocJar

      pom {
        name = project.name
        description = project.description
        url = gitHubRepositoryUrl
        scm {
          url = gitHubRepositoryUrl
          connection = "scm:git:git://github.com/${gitHubRepository}.git"
          developerConnection = "scm:git:ssh://github.com/${gitHubRepository}.git"
        }
        licenses {
          license {
            name = 'The Apache Software License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
            comments = 'A business-friendly OSS license'
          }
        }
        organization {
          name = orgName
          url = orgUrl
        }
        developers {
          developer {
            id = 'dub'
            name = 'Leonid Dubinsky'
            email = 'dub@podval.org'
            url = 'https://dub.podval.org'
            organization = orgName
            organizationUrl = orgUrl
            timezone = '-5'
          }
        }
      }
    }
  }
}

signing {
  sign publishing.publications.library
  useInMemoryPgpKeys(
    findProperty('gnupg.dub-podval-org.key').toString(),
    findProperty('gnupg.dub-podval-org.password').toString()
  )
}

gradlePlugin {
  website = gitHubRepositoryUrl
  vcsUrl  = gitHubRepositoryUrl //.git' ?
  plugins {
    scalajs {
      id = 'org.podval.tools.scalajs'
      implementationClass = 'org.podval.tools.scalajs.ScalaJSPlugin'
      displayName = project.description
      description = project.description
      tags.set(['Scala', 'ScalaJS', 'sbt', 'testing', 'ScalaTest'])
    }
  }
}

tasks.register('uploadLibrary')
uploadLibrary.description('Upload artifacts')
uploadLibrary.group('publishing')
uploadLibrary.dependsOn(publishLibraryPublicationToMavenCentralRepository)

tasks.register('upload')
upload.description('Upload artifacts and plugins')
upload.group('publishing')
upload.dependsOn(uploadLibrary)
upload.dependsOn(publishPlugins)
